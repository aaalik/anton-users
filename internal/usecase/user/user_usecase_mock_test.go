// Code generated by MockGen. DO NOT EDIT.
// Source: type.go

// Package user is a generated GoMock package.
package user

import (
	context "context"
	reflect "reflect"

	model "github.com/aaalik/anton-users/internal/model"
	service "github.com/aaalik/anton-users/internal/service"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockiUserRepo is a mock of iUserRepo interface.
type MockiUserRepo struct {
	ctrl     *gomock.Controller
	recorder *MockiUserRepoMockRecorder
}

// MockiUserRepoMockRecorder is the mock recorder for MockiUserRepo.
type MockiUserRepoMockRecorder struct {
	mock *MockiUserRepo
}

// NewMockiUserRepo creates a new mock instance.
func NewMockiUserRepo(ctrl *gomock.Controller) *MockiUserRepo {
	mock := &MockiUserRepo{ctrl: ctrl}
	mock.recorder = &MockiUserRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiUserRepo) EXPECT() *MockiUserRepoMockRecorder {
	return m.recorder
}

// CountUsers mocks base method.
func (m *MockiUserRepo) CountUsers(ctx context.Context, request *service.RequestListUser) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountUsers", ctx, request)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountUsers indicates an expected call of CountUsers.
func (mr *MockiUserRepoMockRecorder) CountUsers(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountUsers", reflect.TypeOf((*MockiUserRepo)(nil).CountUsers), ctx, request)
}

// CreateUser mocks base method.
func (m *MockiUserRepo) CreateUser(ctx context.Context, tx *sqlx.Tx, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockiUserRepoMockRecorder) CreateUser(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockiUserRepo)(nil).CreateUser), ctx, tx, user)
}

// DeleteUser mocks base method.
func (m *MockiUserRepo) DeleteUser(ctx context.Context, tx *sqlx.Tx, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, tx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockiUserRepoMockRecorder) DeleteUser(ctx, tx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockiUserRepo)(nil).DeleteUser), ctx, tx, id)
}

// DetailUser mocks base method.
func (m *MockiUserRepo) DetailUser(ctx context.Context, id string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetailUser", ctx, id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetailUser indicates an expected call of DetailUser.
func (mr *MockiUserRepoMockRecorder) DetailUser(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetailUser", reflect.TypeOf((*MockiUserRepo)(nil).DetailUser), ctx, id)
}

// ListUser mocks base method.
func (m *MockiUserRepo) ListUser(ctx context.Context, request *service.RequestListUser) ([]*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUser", ctx, request)
	ret0, _ := ret[0].([]*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUser indicates an expected call of ListUser.
func (mr *MockiUserRepoMockRecorder) ListUser(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUser", reflect.TypeOf((*MockiUserRepo)(nil).ListUser), ctx, request)
}

// UpdateUser mocks base method.
func (m *MockiUserRepo) UpdateUser(ctx context.Context, tx *sqlx.Tx, user *model.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, tx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockiUserRepoMockRecorder) UpdateUser(ctx, tx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockiUserRepo)(nil).UpdateUser), ctx, tx, user)
}

// MockiDatabaseUtils is a mock of iDatabaseUtils interface.
type MockiDatabaseUtils struct {
	ctrl     *gomock.Controller
	recorder *MockiDatabaseUtilsMockRecorder
}

// MockiDatabaseUtilsMockRecorder is the mock recorder for MockiDatabaseUtils.
type MockiDatabaseUtilsMockRecorder struct {
	mock *MockiDatabaseUtils
}

// NewMockiDatabaseUtils creates a new mock instance.
func NewMockiDatabaseUtils(ctrl *gomock.Controller) *MockiDatabaseUtils {
	mock := &MockiDatabaseUtils{ctrl: ctrl}
	mock.recorder = &MockiDatabaseUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiDatabaseUtils) EXPECT() *MockiDatabaseUtilsMockRecorder {
	return m.recorder
}

// ExecuteTx mocks base method.
func (m *MockiDatabaseUtils) ExecuteTx(ctx context.Context, tx *sqlx.Tx, fn func(context.Context, *sqlx.Tx) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteTx", ctx, tx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecuteTx indicates an expected call of ExecuteTx.
func (mr *MockiDatabaseUtilsMockRecorder) ExecuteTx(ctx, tx, fn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteTx", reflect.TypeOf((*MockiDatabaseUtils)(nil).ExecuteTx), ctx, tx, fn)
}

// MockiRandomUtils is a mock of iRandomUtils interface.
type MockiRandomUtils struct {
	ctrl     *gomock.Controller
	recorder *MockiRandomUtilsMockRecorder
}

// MockiRandomUtilsMockRecorder is the mock recorder for MockiRandomUtils.
type MockiRandomUtilsMockRecorder struct {
	mock *MockiRandomUtils
}

// NewMockiRandomUtils creates a new mock instance.
func NewMockiRandomUtils(ctrl *gomock.Controller) *MockiRandomUtils {
	mock := &MockiRandomUtils{ctrl: ctrl}
	mock.recorder = &MockiRandomUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiRandomUtils) EXPECT() *MockiRandomUtilsMockRecorder {
	return m.recorder
}

// UniqueID mocks base method.
func (m *MockiRandomUtils) UniqueID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UniqueID")
	ret0, _ := ret[0].(string)
	return ret0
}

// UniqueID indicates an expected call of UniqueID.
func (mr *MockiRandomUtilsMockRecorder) UniqueID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UniqueID", reflect.TypeOf((*MockiRandomUtils)(nil).UniqueID))
}

// MockiHasherUtils is a mock of iHasherUtils interface.
type MockiHasherUtils struct {
	ctrl     *gomock.Controller
	recorder *MockiHasherUtilsMockRecorder
}

// MockiHasherUtilsMockRecorder is the mock recorder for MockiHasherUtils.
type MockiHasherUtilsMockRecorder struct {
	mock *MockiHasherUtils
}

// NewMockiHasherUtils creates a new mock instance.
func NewMockiHasherUtils(ctrl *gomock.Controller) *MockiHasherUtils {
	mock := &MockiHasherUtils{ctrl: ctrl}
	mock.recorder = &MockiHasherUtilsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockiHasherUtils) EXPECT() *MockiHasherUtilsMockRecorder {
	return m.recorder
}

// HashPassword mocks base method.
func (m *MockiHasherUtils) HashPassword(password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HashPassword", password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HashPassword indicates an expected call of HashPassword.
func (mr *MockiHasherUtilsMockRecorder) HashPassword(password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HashPassword", reflect.TypeOf((*MockiHasherUtils)(nil).HashPassword), password)
}
